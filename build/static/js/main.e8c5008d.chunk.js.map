{"version":3,"sources":["core/configureStore.js","reducer/homeReducer/homeReducer.js","reducer/homeReducer/fn.js","reducer/homeReducer/index.js","saga/homeSaga.js","saga/index.js","core/configureStore.prod.js","reducer/index.js","routes.js","container/App.js","serviceWorker.js","index.js"],"names":["module","exports","require","initState","home","handle","HOME_INITSTATE","state","action","HOME_TEST","payload","Object","assign","homeReducer","createReducer","homeSaga","regenerator_default","a","wrap","_context","prev","next","takeLatest","stop","_marked","_context2","put","type","_marked2","rootSaga","all","fork","saga_marked","history","createHistory","sagaMiddleware","createSagaMiddleware","middleware","thunk","routerMiddleware","configureStore","preloadedState","arguments","length","undefined","store","createStore","combineReducers","router","connectRouter","compose","applyMiddleware","run","routes","path","component","loadable","Promise","__webpack_require__","e","then","bind","fallback","createBrowserHistory","window","App","react_default","createElement","locale_provider","locale","zhCN","es","esm","Fragment","renderRoutes","Component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","container_App","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e8c5008d.chunk.js","sourcesContent":["if (process.env.NODE_ENV === 'production') {\r\n    module.exports = require('./configureStore.prod')\r\n} else {\r\n    module.exports = require('./configureStore.dev')\r\n}\r\n","import { createReducer } from 'yf-helper';\r\nimport * as fn from './fn';\r\n\r\nconst initState = {\r\n    home: 'home'\r\n};\r\n\r\nconst handle = {\r\n    // 初始化\r\n    'HOME_INITSTATE': (state, action) => initState,\r\n    'HOME_TEST': fn.test\r\n};\r\n\r\nconst homeReducer = createReducer(initState, handle);\r\n\r\nexport default homeReducer;\r\n","export const test = (state, action) => {\r\n    const { payload } = action\r\n    return Object.assign({}, state, { home: payload })\r\n}\r\n","import homeReducer from './homeReducer';\r\n\r\nexport default homeReducer;\r\n","import { takeLatest, put } from 'redux-saga/effects'\r\nexport default function* homeSaga () {\r\n    yield takeLatest('TODO_SOMETHING', home)\r\n}\r\n\r\nfunction* home () {\r\n    yield put({\r\n        type: 'HOME_TEST',\r\n        payload: 'clsInfo'\r\n    })\r\n}\r\n","\r\nimport { all, fork } from 'redux-saga/effects';\r\nimport homeSaga from './homeSaga';\r\nfunction* rootSaga () {\r\n    yield all([\r\n        fork(homeSaga)\r\n    ])\r\n}\r\n\r\nexport default rootSaga;\r\n","// import { createStore, applyMiddleware } from 'redux';\r\nimport { createStore, compose, applyMiddleware } from 'redux'\r\nimport { routerMiddleware } from 'connected-react-router'\r\nimport thunk from 'redux-thunk';\r\nimport createRootReducer from '../reducer';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport rootSaga from '../saga';\r\nimport createHistory from 'history/createBrowserHistory'\r\nconst history = createHistory()\r\nconst sagaMiddleware = createSagaMiddleware()\r\nconst middleware = [sagaMiddleware, thunk, routerMiddleware(history)];\r\nconst configureStore = (preloadedState = {}) => {\r\n    const store = createStore(\r\n        createRootReducer(history),\r\n        preloadedState,\r\n        compose(\r\n            applyMiddleware(\r\n                routerMiddleware(history), // for dispatching history actions\r\n                // ... other middlewares ...\r\n                middleware,\r\n            ),\r\n        ),\r\n    )\r\n    sagaMiddleware.run(rootSaga);\r\n\r\n    return store;\r\n}\r\n\r\nexport default configureStore();\r\n","\r\nimport { combineReducers } from 'redux'\r\nimport { connectRouter } from 'connected-react-router'\r\n\r\nimport homeReducer from './homeReducer';\r\n\r\nexport default (history) => combineReducers({\r\n    router: connectRouter(history),\r\n    homeReducer\r\n})\r\n","import loadable from '@loadable/component'\r\n\r\n// const LoadableComponent = (importComponent) => {\r\n//     return Loadable({\r\n//         loader: importComponent,\r\n//         loading: () => '....'\r\n//     });\r\n// }\r\n\r\n/**\r\n * 路由配置\r\n */\r\nconst routes = [\r\n    {\r\n        path: '/',\r\n        component: loadable(() => import('./view/home/layout'), {\r\n            fallback: 'Loading',\r\n        }),\r\n        routes: [\r\n            {\r\n                path: '/home/resume',\r\n                component: loadable(() => import('./view/home/resume')),\r\n            },\r\n            {\r\n                path: '/home/discribtion',\r\n                component: loadable(() => import('./view/home/discribtion')),\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        path: '/project',\r\n        component: loadable(() => import('./view/project/layout'))\r\n    }\r\n]\r\n\r\nexport default routes;\r\n","import React, { Component } from 'react';\nimport { renderRoutes } from 'react-router-config'\n// import { BrowserRouter as Router } from 'react-router-dom';\nimport routes from '../routes';\nimport { Provider } from 'react-redux'\nimport { ConnectedRouter } from 'connected-react-router'\nimport { createBrowserHistory } from 'history'\nimport { LocaleProvider } from 'antd';\nimport zhCN from 'antd/lib/locale-provider/zh_CN';\n\nimport configureStore from '../core/configureStore'\n\nconst history = createBrowserHistory()\nconst store = configureStore;\nwindow.store = store;\n// import './App.module.scss';\n\nclass App extends Component {\n    render () {\n        return (\n            <LocaleProvider locale={zhCN}>\n                <Provider store={store}>\n                    <ConnectedRouter history={history}> { /* place ConnectedRouter under Provider */ }\n                        <> { /* your usual react-router v4 routing */ }\n                            {renderRoutes(routes)}\n                        </>\n                    </ConnectedRouter>\n                </Provider>\n            </LocaleProvider>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register (config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW (swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister () {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.module.scss';\nimport App from './container/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}